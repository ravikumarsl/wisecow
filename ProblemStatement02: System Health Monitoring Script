import psutil
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(filename='system_health.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Thresholds
CPU_USAGE_THRESHOLD = 80  # in percent
MEMORY_USAGE_THRESHOLD = 80  # in percent
DISK_USAGE_THRESHOLD = 80  # in percent

def check_cpu_usage():
    usage = psutil.cpu_percent(interval=1)
    if usage > CPU_USAGE_THRESHOLD:
        logging.warning(f'High CPU usage detected: {usage}%')
    return usage

def check_memory_usage():
    memory = psutil.virtual_memory()
    usage = memory.percent
    if usage > MEMORY_USAGE_THRESHOLD:
        logging.warning(f'High Memory usage detected: {usage}%')
    return usage

def check_disk_usage():
    disk_usage = psutil.disk_usage('/')
    usage = disk_usage.percent
    if usage > DISK_USAGE_THRESHOLD:
        logging.warning(f'High Disk usage detected: {usage}%')
    return usage

def check_running_processes():
    process_count = len(psutil.pids())
    logging.info(f'Number of running processes: {process_count}')
    return process_count

def monitor_system():
    cpu_usage = check_cpu_usage()
    memory_usage = check_memory_usage()
    disk_usage = check_disk_usage()
    process_count = check_running_processes()
    
    # Print to console for immediate feedback (optional)
    print(f"CPU Usage: {cpu_usage}%")
    print(f"Memory Usage: {memory_usage}%")
    print(f"Disk Usage: {disk_usage}%")
    print(f"Running Processes: {process_count}")

if __name__ == "__main__":
    monitor_system()
